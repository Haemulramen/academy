name: CI/CD Pipeline for Spring Boot (Gradle)

on:
  push:
    branches:
      - deploy
  pull_request:
    branches:
      - deploy

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Print Current Directory
        run: pwd && ls -l

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant Execute Permission for Gradlew
        run: chmod +x backend/gradlew

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Create SECRET.yml
        run: |
          echo "${{ secrets.SECRET_YML }}" > backend/src/main/resources/SECRET.yml
          chmod 644 backend/src/main/resources/SECRET.yml

      - name: Build and Test
        run: cd backend && ./gradlew clean build
      
      - name: Verify Build Artifacts
        run: ls -l backend/build/libs/      

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # ✅ GitHub Secrets 값을 환경 변수로 저장 (SSH 키 제외)
      - name: Set Up Environment Variables
        run: |
          echo "SERVER_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
          echo "SERVER_IP=${{ secrets.SERVER_IP }}" >> $GITHUB_ENV

      # ✅ SSH 키를 파일로 저장 (GITHUB_ENV 사용하지 않음)
      - name: Configure SSH Key
        run: |
          printf "%s\n" "${{ secrets.DEPLOY_KEY }}" > japan_academy.pem
          chmod 600 japan_academy.pem

      # ✅ 환경 변수 확인 (DEPLOY_KEY는 출력하지 않음)
      - name: Debug SSH Connection Variables
        run: |
          echo "SERVER_USER: $SERVER_USER"
          echo "SERVER_IP: $SERVER_IP"

      # ✅ SSH 접속 테스트
      - name: Test SSH Connection
        run: |
          ssh -i japan_academy.pem -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "echo Connected!"

      - name: Build without Test
        run: cd backend && chmod +x ./gradlew && ./gradlew clean build -x test

      - name: Deploy JAR to Server
        run: |
          scp -i japan_academy.pem backend/build/libs/backend-0.0.1-SNAPSHOT.jar $SERVER_USER@$SERVER_IP:~/academy/backend/build/libs/app.jar

      - name: Restart Application
        run: |
          ssh -i japan_academy.pem $SERVER_USER@$SERVER_IP <<EOF
            PID=\$(ps aux | grep 'app.jar' | grep -v grep | awk '{print \$2}')
            if [ ! -z "\$PID" ]; then
              echo "Stopping existing application with PID: \$PID"
              kill -9 \$PID
            fi
            
            echo "Starting new application..."
            nohup java -jar ~/academy/backend/build/libs/app.jar > ~/academy/backend/build/libs/nohup.out 2>&1 &
          EOF
