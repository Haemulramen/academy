name: CI/CD Pipeline for Spring Boot (Gradle)

# 워크플로우 트리거 설정
on:
  push:
    branches:
      - deploy
  pull_request:
    branches:
      - deploy

jobs:
  # 1. Build & Test Job
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Java 환경 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # OpenJDK 배포판
          java-version: '17' # Java 버전 (Spring Boot에 맞게 설정)

      # Gradle 의존성 캐싱
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 빌드 및 테스트 실행
      - name: Build and Test
        run: ./gradlew clean build

  # 2. Deploy Job
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test # build-and-test 작업이 성공한 경우에만 실행
    if: github.ref == 'refs/heads/main' # main 브랜치에 푸시된 경우에만 실행
    steps:
      # 소스코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 배포 스크립트 실행
      - name: Deploy to Server
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "Starting Deployment..."
          echo "$DEPLOY_KEY" > deploy_key.pem
          chmod 600 deploy_key.pem
          scp -i deploy_key.pem build/libs/*.jar $SERVER_USER@$SERVER_IP:~/academy/backend/
          ssh -i deploy_key.pem $SERVER_USER@$SERVER_IP <<EOF
            pkill -f 'java -jar' || true
            nohup java -jar ~/academy/backend/build/libs/backend-0.0.1-SNAPSHOT.jar > nohup.out 2>&1 &
          EOF
    
